// <auto-generated />
using System;
using EventBookingSystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventBookingSystem.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251015000327_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventBookingSystem.Models.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("EventBookingSystem.Models.BookingItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("TicketTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("TicketTypeId");

                    b.ToTable("BookingItems");
                });

            modelBuilder.Entity("EventBookingSystem.Models.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LocationCity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PosterUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Venue")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4fcd48cb-eb97-42fb-98c9-a2b7d7007ac1"),
                            Capacity = 5000,
                            Category = "Music",
                            CreatedAt = new DateTime(2025, 10, 15, 0, 3, 26, 134, DateTimeKind.Utc).AddTicks(6942),
                            Description = "Join us for the biggest jazz festival in South Africa featuring international and local artists.",
                            EndDateTime = new DateTime(2025, 11, 16, 0, 3, 26, 134, DateTimeKind.Utc).AddTicks(6939),
                            LocationCity = "Cape Town",
                            PosterUrl = "https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?w=500",
                            StartDateTime = new DateTime(2025, 11, 14, 0, 3, 26, 134, DateTimeKind.Utc).AddTicks(6929),
                            Title = "Cape Town Jazz Festival 2025",
                            Venue = "Green Point Stadium"
                        },
                        new
                        {
                            Id = new Guid("fe85c258-67a8-489b-8772-76af1b39534c"),
                            Capacity = 2000,
                            Category = "Tech",
                            CreatedAt = new DateTime(2025, 10, 15, 0, 3, 26, 134, DateTimeKind.Utc).AddTicks(6980),
                            Description = "The premier technology conference featuring AI, blockchain, and cloud computing experts.",
                            EndDateTime = new DateTime(2025, 12, 1, 0, 3, 26, 134, DateTimeKind.Utc).AddTicks(6978),
                            LocationCity = "Johannesburg",
                            PosterUrl = "https://images.unsplash.com/photo-1540575467063-178a50c2df87?w=500",
                            StartDateTime = new DateTime(2025, 11, 29, 0, 3, 26, 134, DateTimeKind.Utc).AddTicks(6976),
                            Title = "Tech Conference SA 2025",
                            Venue = "Sandton Convention Centre"
                        },
                        new
                        {
                            Id = new Guid("dfcac1f4-f6ff-484c-bdc4-5aa7ca5f0602"),
                            Capacity = 55000,
                            Category = "Sport",
                            CreatedAt = new DateTime(2025, 10, 15, 0, 3, 26, 134, DateTimeKind.Utc).AddTicks(7008),
                            Description = "Watch the Springboks take on their rivals in this thrilling rugby match.",
                            EndDateTime = new DateTime(2025, 12, 14, 3, 3, 26, 134, DateTimeKind.Utc).AddTicks(6988),
                            LocationCity = "Durban",
                            PosterUrl = "https://images.unsplash.com/photo-1551698618-1dfe5d97d256?w=500",
                            StartDateTime = new DateTime(2025, 12, 14, 0, 3, 26, 134, DateTimeKind.Utc).AddTicks(6987),
                            Title = "Springbok Rugby Match",
                            Venue = "Moses Mabhida Stadium"
                        });
                });

            modelBuilder.Entity("EventBookingSystem.Models.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ReferenceCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("EventBookingSystem.Models.TicketType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("QuantityAvailable")
                        .HasColumnType("int");

                    b.Property<int>("QuantitySold")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("TicketTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c3a1a273-91cc-48f8-b385-552cfc0e9327"),
                            EventId = new Guid("4fcd48cb-eb97-42fb-98c9-a2b7d7007ac1"),
                            IsActive = true,
                            Name = "General Admission",
                            Price = 250.00m,
                            QuantityAvailable = 3000,
                            QuantitySold = 0
                        },
                        new
                        {
                            Id = new Guid("acb0e469-ef0b-4cff-9ce0-8c03509051fe"),
                            EventId = new Guid("4fcd48cb-eb97-42fb-98c9-a2b7d7007ac1"),
                            IsActive = true,
                            Name = "VIP",
                            Price = 750.00m,
                            QuantityAvailable = 500,
                            QuantitySold = 0
                        },
                        new
                        {
                            Id = new Guid("23d499a5-ba3d-421f-9240-2fc502ccffeb"),
                            EventId = new Guid("4fcd48cb-eb97-42fb-98c9-a2b7d7007ac1"),
                            IsActive = true,
                            Name = "Early Bird",
                            Price = 200.00m,
                            QuantityAvailable = 1000,
                            QuantitySold = 0
                        },
                        new
                        {
                            Id = new Guid("e27bb41f-f743-479c-ad9c-a3149b454c86"),
                            EventId = new Guid("fe85c258-67a8-489b-8772-76af1b39534c"),
                            IsActive = true,
                            Name = "Standard",
                            Price = 1200.00m,
                            QuantityAvailable = 1500,
                            QuantitySold = 0
                        },
                        new
                        {
                            Id = new Guid("97256b92-8b71-40ba-954a-dfc5520d1d20"),
                            EventId = new Guid("fe85c258-67a8-489b-8772-76af1b39534c"),
                            IsActive = true,
                            Name = "Student",
                            Price = 600.00m,
                            QuantityAvailable = 300,
                            QuantitySold = 0
                        },
                        new
                        {
                            Id = new Guid("143cd52e-2ba2-47a5-b9da-9b665eecfce8"),
                            EventId = new Guid("dfcac1f4-f6ff-484c-bdc4-5aa7ca5f0602"),
                            IsActive = true,
                            Name = "North Stand",
                            Price = 150.00m,
                            QuantityAvailable = 20000,
                            QuantitySold = 0
                        },
                        new
                        {
                            Id = new Guid("dbb12bb3-e571-4212-a700-1045a7de6f46"),
                            EventId = new Guid("dfcac1f4-f6ff-484c-bdc4-5aa7ca5f0602"),
                            IsActive = true,
                            Name = "South Stand",
                            Price = 150.00m,
                            QuantityAvailable = 20000,
                            QuantitySold = 0
                        },
                        new
                        {
                            Id = new Guid("101875ba-fa97-4aeb-9757-2f78763b76a1"),
                            EventId = new Guid("dfcac1f4-f6ff-484c-bdc4-5aa7ca5f0602"),
                            IsActive = true,
                            Name = "VIP Box",
                            Price = 500.00m,
                            QuantityAvailable = 100,
                            QuantitySold = 0
                        });
                });

            modelBuilder.Entity("EventBookingSystem.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1f23390d-a5bb-4020-9577-97a4c8ddc6fb"),
                            City = "Kimberley",
                            Country = "South Africa",
                            CreatedAt = new DateTime(2025, 10, 15, 0, 3, 26, 134, DateTimeKind.Utc).AddTicks(5418),
                            Email = "admin@mzansimomentshub.com",
                            FirstName = "Admin",
                            Gender = "Other",
                            LastName = "User",
                            PasswordHash = "$2a$11$xl5YAeNC7Fyc2.3Gn/dUBu/TaaS.agA42qFrQFPBZOCQS.MN0UvtW",
                            PhoneNumber = "+27123456789",
                            PostalCode = "8300",
                            Role = "Admin",
                            StreetAddress = "123 Admin Street"
                        });
                });

            modelBuilder.Entity("EventBookingSystem.Models.Booking", b =>
                {
                    b.HasOne("EventBookingSystem.Models.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventBookingSystem.Models.BookingItem", b =>
                {
                    b.HasOne("EventBookingSystem.Models.Booking", "Booking")
                        .WithMany("BookingItems")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventBookingSystem.Models.TicketType", "TicketType")
                        .WithMany("BookingItems")
                        .HasForeignKey("TicketTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("TicketType");
                });

            modelBuilder.Entity("EventBookingSystem.Models.Payment", b =>
                {
                    b.HasOne("EventBookingSystem.Models.Booking", "Booking")
                        .WithOne("Payment")
                        .HasForeignKey("EventBookingSystem.Models.Payment", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("EventBookingSystem.Models.TicketType", b =>
                {
                    b.HasOne("EventBookingSystem.Models.Event", "Event")
                        .WithMany("TicketTypes")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventBookingSystem.Models.Booking", b =>
                {
                    b.Navigation("BookingItems");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("EventBookingSystem.Models.Event", b =>
                {
                    b.Navigation("TicketTypes");
                });

            modelBuilder.Entity("EventBookingSystem.Models.TicketType", b =>
                {
                    b.Navigation("BookingItems");
                });

            modelBuilder.Entity("EventBookingSystem.Models.User", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
